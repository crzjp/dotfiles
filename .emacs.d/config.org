#+title: My GNU Emacs configuration
#+property: header-args :tangle init.el :lexical t

* Early init
:properties:
:header-args: :tangle early-init.el
:end:

** Garbage collector

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-

(defvar last-file-name-handler-alist file-name-handler-alist)

(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6
      file-name-handler-alist nil)

(add-hook 'emacs-startup-hook
          #'(lambda ()
              (setq gc-cons-threshold (* 2 1000 1000)
                    gc-cons-percentage 0.1
                    file-name-handler-alist last-file-name-handler-alist)))
#+end_src

** User emacs directory

#+begin_src emacs-lisp
(setq user-emacs-directory "~/.cache/emacs/")

(when (not (file-directory-p user-emacs-directory))
  (make-directory user-emacs-directory t))
#+end_src

** Native compile

#+begin_src emacs-lisp
(setq package-native-compile t
      native-comp-deferred-compilation t
      native-comp-async-report-warnings-errors nil)

(setq native-comp-eln-load-path
      (list (expand-file-name "eln-cache" user-emacs-directory)))
#+end_src

** Package

#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

** Visual

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(scroll-bar-mode -1)

(setq inhibit-startup-screen t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil
      server-client-instructions nil
      inhibit-x-resources t
      frame-inhibit-implied-resize t)
#+end_src

* Package

** Installer and manager

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-

(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(setq package-user-dir (expand-file-name "elpa" user-emacs-directory))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(eval-and-compile
  (setq use-package-always-ensure t
        use-package-always-defer t
        use-package-expand-minimally t))
#+end_src

** Updater

#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-delete-old-versions t))
#+end_src

* Sane defaults

** Async shell command with $EDITOR

#+begin_src emacs-lisp
(global-set-key (kbd "M-&") 'with-editor-async-shell-command)
#+end_src

** Automatically revert buffers

#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)

(global-auto-revert-mode 1)
#+end_src

** Default directory

#+begin_src emacs-lisp
(cd "~/")
#+end_src

** Delete by moving to trash

#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory (expand-file-name "emacs-trash" temporary-file-directory))
#+end_src

** Delete selected region when input

#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

** Don't save duplicates to kill ring

#+begin_src emacs-lisp
(setq kill-do-not-save-duplicates t)
#+end_src

** Enable disabled commands

#+begin_src emacs-lisp
(setq disabled-command-function nil)
#+end_src

** EWW

#+begin_src emacs-lisp
(use-package browse-url
  :ensure nil
  :config
  (when (getenv "BROWSER")
    (setq browse-url-generic-program (executable-find (getenv "BROWSER"))
          browse-url-browser-function 'browse-url-generic)))
#+end_src

** Files

*** Auto save

#+begin_src emacs-lisp
(setq auto-save-list-file-prefix (expand-file-name "autosaves/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "autosaves/" user-emacs-directory) t)))
#+end_src

*** Backup

#+begin_src emacs-lisp
(setq backup-directory-alist `((".*" . ,(expand-file-name "backups" user-emacs-directory)))
      backup-by-copying t
      version-control t
      delete-old-versions t
      vc-make-backup-files t
      kept-old-versions 10
      kept-new-versions 10)
#+end_src

*** Custom

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

*** Recent

#+begin_src emacs-lisp
(setq recentf-max-saved-items 100
      recentf-auto-cleanup (* 5 60))

(recentf-mode 1)
#+end_src

*** Symlinks

#+begin_src emacs-lisp
(setq-default vc-follow-symlinks)
#+end_src

** Focus help window when opened

#+begin_src emacs-lisp
(use-package help
  :ensure nil
  :custom
  (help-window-select t))
#+end_src

** Man pages

#+begin_src emacs-lisp
(use-package woman
  :ensure nil
  :custom
  (woman-fill-frame t))
#+end_src

** Pager environment variable

#+begin_src emacs-lisp
(setenv "PAGER" "cat")
(setenv "MANPAGER" "cat")
#+end_src

** Short answers

#+begin_src emacs-lisp
(setq use-short-answers t)
#+end_src

** Stop large file warning

#+begin_src emacs-lisp
(setq large-file-warning-threshold nil)
#+end_src

** Tab indentation

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 4)
#+end_src

** Unbind the anoying chord

#+begin_src emacs-lisp
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x C-z"))
#+end_src

** User description

#+begin_src emacs-lisp
(setq user-full-name "Jo√£o Paulo da Cruz"
      user-mail-address "crzjp@riseup.net")
#+end_src

* Completion

** At point (or in region)

*** Extra completion functions

#+begin_src emacs-lisp
(use-package cape
  :defer 1
  :config
  (add-to-list 'completion-at-point-functions 'cape-file))
#+end_src

*** Popup

#+begin_src emacs-lisp
(use-package corfu
  :defer 1
  :bind (:map corfu-map
         ("M-m" . (lambda ()
                    (interactive)
                    (let ((completion-extra-properties corfu--extra)
                          completion-cycle-threshold completion-cycling)
                      (apply #'consult-completion-in-region completion-in-region--data)))))
  :custom
  (corfu-preview-current nil)
  :config
  (global-corfu-mode 1))
#+end_src

** Minibuffer

*** Additional completion commands

#+begin_src emacs-lisp
(use-package consult
  :after vertico
  :demand nil
  :bind (("C-c r" . consult-recent-file)
         :map minibuffer-mode-map
         ("C-r" . consult-history))
  :config
  (consult-customize consult-recent-file :preview-key nil)
  (consult-customize consult-org-heading :preview-key nil)
  (setq-default completion-in-region-function
                (lambda (&rest args)
                  (apply (if vertico-mode
                             'consult-completion-in-region
                           'completion--in-region)
                         args))))
#+end_src

*** Anotations

#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :demand nil
  :config
  (marginalia-mode 1))
#+end_src

*** Completion style

#+begin_src emacs-lisp
(use-package orderless
  :after vertico
  :custom
  (completion-styles '(orderless))
  (orderless-matching-styles '(orderless-initialism orderless-flex)))
#+end_src

*** Completion UI

#+begin_src emacs-lisp
(use-package vertico
  :defer 1
  :bind (:map vertico-map
         ("DEL" . vertico-directory-delete-char))
  :config
  (vertico-mode 1))
#+end_src

Disabled fido config to a (probably) future more polished version.

#+begin_src emacs-lisp :tangle no
(setq completion-styles '(initials flex))

(use-package icomplete
  :ensure nil
  :defer 1
  :bind (:map icomplete-fido-mode-map
         ("<tab>" . icomplete-force-complete)
         ("RET" . icomplete-force-complete-and-exit))
  :hook (icomplete-minibuffer-setup
         . (lambda ()
             (setq-local truncate-lines t
                         completion-styles '(initials flex))))
  :custom-face (icomplete-selected-match ((t (:extend t))))
  :config
  (fido-vertical-mode 1))
#+end_src
  
*** Hide some commands

#+begin_src emacs-lisp
(setq read-extended-command-predicate 'command-completion-default-include-p)
#+end_src

*** History

#+begin_src emacs-lisp
(setq history-length 50
      history-delete-duplicates t)

(savehist-mode 1)
#+end_src

*** Recursive minibuffers

#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)

(minibuffer-depth-indicate-mode 1)
#+end_src

* Dired

#+begin_src emacs-lisp
(use-package diredfl
  :hook (dired-mode . diredfl-mode))

(use-package dired
  :ensure nil
  :bind (("C-x C-d" . dired-jump)
         :map dired-mode-map
         ("f" . dired-create-empty-file))
  :custom
  (dired-listing-switches "-agGh --group-directories-first")
  (dired-kill-when-opening-new-dired-buffer t))
#+end_src

* DWIM shell commands

** Defaults

#+begin_src emacs-lisp :noweb yes
(use-package dwim-shell-command
  :defer 2
  :bind (([remap shell-command] . dwim-shell-command)
         ("C-c k" . dwim-shell-commands-kill-process)
         :map dired-mode-map
         ("!" . dwim-shell-command))
  :custom
  (dwim-shell-command-default-command nil)
  :config
  <<dwim-shell-commands-flac-to-mp3>>
  <<dwim-shell-commands-wallpaper-set-fill>>
  (require 'dwim-shell-commands))
#+end_src

** Convert flac file(s) to mp3

#+begin_src emacs-lisp :tangle no :noweb-ref dwim-shell-commands-flac-to-mp3
(defun dwim-shell-commands-flac-to-mp3 ()
  (interactive)
  (dwim-shell-command-on-marked-files
   "Convert flac to mp3"
   "ffmpeg -stats -n -i '<<f>>' -ab 320k -map_metadata 0 -id3v2_version 3 '<<fne>>.mp3'"
   :utils "ffmpeg"))
#+end_src

** Set wallpaper

#+begin_src emacs-lisp :tangle no :noweb-ref dwim-shell-commands-wallpaper-set-fill
(defun dwim-shell-commands-wallpaper-set-fill ()
  (interactive)
  (dwim-shell-command-on-marked-files
   "Set wallpaper with fill parameter"
   "hsetroot -fill '<<f>>'"
   :utils "hsetroot"))
#+end_src

* Ibuffer

** Defaults

#+begin_src emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind (([remap list-buffers] . ibuffer)
         ("C-c b" . ibuffer))
  :hook (ibuffer-mode . ibuffer-auto-mode)
  :custom
  (ibuffer-formats
   '((mark modified read-only locked " "
           (name 20 20 :left :elide)
           " "
           (size-h 11 -1 :right)
           " "
           (mode 16 16 :left :elide)
           " " filename-and-process)
     (mark " "
           (name 16 -1)
           " " filename))))
#+end_src

** Groups

#+begin_src emacs-lisp
(use-package ibuffer
  :ensure nil
  :hook (ibuffer-mode . (lambda () (ibuffer-switch-to-saved-filter-groups "Default")))
  :custom
  (ibuffer-saved-filter-groups
   '(("Default"
      ("Modified" (and (modified . t)
                       (visiting-file . t)))
      ("Term" (or (mode . vterm-mode)
                  (mode . eshell-mode)
                  (mode . term-mode)
                  (mode . shell-mode)))
      ("Debug" (mode . debugger-mode))
      ("Agenda" (filename . "agenda.org"))
      ("Org" (mode . org-mode))
      ("Magit" (name . "magit.*"))
      ("Mail" (or (mode . mu4e-compose-mode)
                  (mode . mu4e-headers-mode)
                  (mode . mu4e-main-mode)))
      ("Book" (or (mode . pdf-view-mode)
                  (mode . nov-mode)))
      ("Dired" (mode . dired-mode))
      ("Chat" (mode . erc-mode))
      ("Help" (or (name . "\*Help\*")
                  (name . "\*Apropos\*")
                  (name . "\*info\*")
                  (mode . help-mode)
                  (mode . woman-mode)
                  (mode . Man-mode)
                  (mode . Custom-mode)))
      ("Image" (mode . image-mode))
      ("Music" (or (mode . mingus-help-mode)
                   (mode . mingus-playlist-mode)
                   (mode . mingus-browse-mode)))
      ("Torrent" (or (mode . transmission-mode)
                     (mode . transmission-files-mode)))
      ("Games" (mode . gomoku-mode))
      ("Internal" (name . "^\*.*$"))
      ("Misc" (name . "^.*$")))))
  (ibuffer-show-empty-filter-groups nil))
#+end_src

** Human readable size column

#+begin_src emacs-lisp
(use-package ibuffer
  :ensure nil
  :config
  
  (defun crz/human-readable-file-sizes-to-bytes (string)
    "Convert a human-readable file size into bytes."
    (cond
     ((string-suffix-p "G" string t)
      (* 1000000000 (string-to-number (substring string 0 (- (length string) 1)))))
     ((string-suffix-p "M" string t)
      (* 1000000 (string-to-number (substring string 0 (- (length string) 1)))))
     ((string-suffix-p "K" string t)
      (* 1000 (string-to-number (substring string 0 (- (length string) 1)))))
     (t
      (string-to-number (substring string 0 (- (length string) 1))))))
  
  (defun crz/bytes-to-human-readable-file-sizes (bytes)
    "Convert number of bytes to human-readable file size."
    (cond
     ((> bytes 1000000000) (format "%10.1fG" (/ bytes 1000000000.0)))
     ((> bytes 100000000) (format "%10.0fM" (/ bytes 1000000.0)))
     ((> bytes 1000000) (format "%10.1fM" (/ bytes 1000000.0)))
     ((> bytes 100000) (format "%10.0fK" (/ bytes 1000.0)))
     ((> bytes 1000) (format "%10.1fK" (/ bytes 1000.0)))
     (t (format "%10d" bytes))))
  
  (define-ibuffer-column size-h
    (:name "Size"
           :inline t
           :summarizer
           (lambda (column-strings)
             (let ((total 0))
               (dolist (string column-strings)
                 (setq total
                       (+ (float (crz/human-readable-file-sizes-to-bytes string))
                          total)))
               (crz/bytes-to-human-readable-file-sizes total))))
    (crz/bytes-to-human-readable-file-sizes (buffer-size))))
#+end_src

* Language modes

** Common Lisp

#+begin_src emacs-lisp
(use-package sly
  :custom
  (inferior-lisp-program (executable-find "sbcl")))
#+end_src

** LSP

#+begin_src emacs-lisp
(use-package eglot)
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("\\.md\\'" . markdown-mode)
         ("README\\.md\\'" . gfm-mode)))
#+end_src

** Shell

Requires =shellcheck= package.

#+begin_src emacs-lisp
(use-package flymake-shellcheck
  :ensure nil
  :hook (sh-mode . flymake-shellcheck-load))
#+end_src

* Magit

#+begin_src emacs-lisp
(use-package pinentry
  :after magit
  :custom
  (epg-pinentry-mode 'loopback))

(use-package magit
  :bind ("C-c g" . magit-status)
  :config
  (pinentry-start))
#+end_src

* Media

** Email

Requires =mu= and =isync/mbsync= packages.

#+begin_src emacs-lisp
(use-package mu4e
  :ensure nil
  :bind ("C-c m" . mu4e)
  :custom
  (mail-user-agent 'mu4e-user-agent)
  (mu4e-get-mail-command "mbsync -a")
  (mu4e-maildir "~/public/mail")
  (mu4e-drafts-folder "/[RiseUp]/drafts")
  (mu4e-sent-folder "/[RiseUp]/sent")
  (mu4e-refile-folder "/[RiseUp]/all")
  (mu4e-trash-folder "/[RiseUp]/trash")
  (mu4e-read-option-use-builtin nil)
  (mu4e-completing-read-function 'completing-read))
#+end_src

** EPUB

#+begin_src emacs-lisp
;(use-package esxml)

(use-package nov
  :mode ("\\.epub\\'" . nov-mode))
#+end_src

** IRC

#+begin_src emacs-lisp
(use-package erc-hl-nicks)

(use-package erc
  :ensure nil
  :custom
  (erc-accidental-paste-threshold-seconds nil)
  (erc-nick "crzjp")
  (erc-fill-column (- (window-width) 1))
  (erc-fill-function 'erc-fill-static)
  (erc-fill-static-center 20)
  (erc-image-inline-rescale 200)
  (erc-prompt (lambda () (concat "[" (buffer-name) "]")))
  :config
  (add-to-list 'erc-modules 'autojoin)
  (add-to-list 'erc-modules 'notifications)
  (add-to-list 'erc-modules 'hl-nicks))
#+end_src

** Music

#+begin_src emacs-lisp
(use-package mingus
  :custom
  (mingus-use-mouse-p nil)
  (mingus-mode-line-show-elapsed-time nil)
  (mingus-mode-line-show-volume nil))
#+end_src

** PDF

#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure nil
  :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
  :hook (pdf-view-mode . pdf-view-midnight-minor-mode)
  :custom
  (pdf-view-continuous nil))
  ;:config
  ;(pdf-loader-install))

(use-package pdf-view-restore
  :hook (pdf-view-mode . pdf-view-restore-mode))
#+end_src

** Torrent

#+begin_src emacs-lisp
(use-package transmission
  :custom
  (transmission-refresh-modes
   '(transmission-mode
     transmission-files-mode
     transmission-info-mode
     transmission-peers-mode)))
#+end_src

* Org

** Agenda

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :bind ("C-c a" . org-agenda)
  :custom
  (org-agenda-start-with-log-mode t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-agenda-files '("~/media/docs/notas/agenda.org")))
#+end_src

** Defaults

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :mode ("\\.org$" . org-mode)
  :bind (:map org-mode-map
         ("C-c o" . consult-org-heading))
  :custom
  (org-files-directory "~/media/docs/org")
  (org-return-follows-link t)
  :config
  (add-to-list 'org-export-backends 'md))
#+end_src

** Source blocks

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :custom
  (org-src-window-setup 'current-window)
  (org-src-preserve-indentation t)
  (org-edit-src-content-indentation 0)
  :config
  (add-to-list 'org-modules 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh")))
#+end_src

** Visual

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :hook (org-mode . visual-line-mode)
  :custom
  (org-startup-indented t)
  (org-startup-with-inline-images t)
  (org-image-actual-width '(600))
  (org-startup-folded t)
  (org-hide-emphasis-markers t)
  (org-ellipsis "‚Ä¶"))

(use-package org-modern)
#+end_src

* Proced

#+begin_src emacs-lisp
(use-package proced
  :ensure nil
  :bind ("C-c p" . proced)
  :hook (proced-mode . (lambda () (proced-toggle-auto-update 1)))
  :custom
  (proced-auto-update-interval 2))
#+end_src

* Shells

** Eshell

*** Aliases

**** Config

#+begin_src emacs-lisp
(use-package em-alias
  :ensure nil
  :custom
  (eshell-aliases-file "~/.emacs.d/eshell-aliases")
  :config
  (eshell-read-aliases-list))
#+end_src

**** List

#+begin_src fundamental :tangle eshell-aliases
alias f find-file $1
alias fo find-file-other-window $1
alias v view-file $1
alias vo view-file-other-window $1
alias d dired $1
alias do dired-other-window $1
alias c eshell/clear-scrollback

alias gi guix install $*
alias gr guix remove $*
alias gs guix search $*

alias poweroff sudo poweroff
alias reboot sudo reboot

alias ls ls -AC --color=always --group-directories-first $*
alias ll ls -AgGh --color=always --group-directories-first $*
alias lt tree -C $*

alias - cd -
alias rm rm -rfI $*
alias mkdir mkdir -p $*
alias cat cat -n $*

alias grep grep --color=always $*
alias zgrep zgrep --color=always $*

alias wttr curl -s wttr.in
alias qttr curl -s wttr.in/?0Q
alias ping ping -c 3 gnu.org
alias free free -h
alias mime file -b --mime-type $*
alias xload xrdb -load $HOME/.Xresources
#+end_src

*** Completions

#+begin_src emacs-lisp
(use-package pcmpl-args
  :after eshell
  :demand nil
  :config
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))

(use-package eshell
  :ensure nil
  :config
  (defun corfu-send-shell (&rest _)
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode) (fboundp 'comint-send-input))
      (comint-send-input))))
  (advice-add 'corfu-insert :after 'corfu-send-shell))
#+end_src

*** Defaults

#+begin_src emacs-lisp
(use-package esh-mode
  :ensure nil
  :bind (("C-c e" . eshell)
         :map eshell-mode-map
         ("C-l" . (lambda ()
                    (interactive)
                    (let ((input (eshell-get-old-input)))
                      (eshell/clear t)
                      (eshell-emit-prompt)
                      (insert input)))))
  :custom
  (eshell-buffer-maximum-lines 1000)
  (eshell-scroll-to-bottom-on-input t)
  (eshell-destroy-buffer-when-process-dies t)
  :config
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer))
#+end_src

*** History

#+begin_src emacs-lisp
(use-package esh-mode
  :ensure nil
  :bind (:map eshell-mode-map
         ("C-r" . consult-history))
  :hook (eshell-pre-command . eshell-save-some-history)
  :custom
  (eshell-history-size 1000)
  (eshell-hist-ignoredups t))
#+end_src

*** Prompt

#+begin_src emacs-lisp
(use-package em-prompt
  :ensure nil
  :bind (:map eshell-mode-map
         ("C-c s" . consult-outline))
  :hook (eshell-mode . (lambda () (setq-local outline-regexp eshell-prompt-regexp)))
  :custom
  (eshell-prompt-regexp "^[^$\n]*\\\$ ")
  (eshell-prompt-function (lambda ()
                            (concat
                             "[" (abbreviate-file-name (eshell/pwd)) "]"
                             (propertize "$" 'invisible t) " "))))
#+end_src

** Shell

#+begin_src emacs-lisp
(use-package comint
  :ensure nil
  :bind ("C-c s" . shell)
  :custom
  (comint-prompt-read-only t))
#+end_src

** Vterm

#+begin_src emacs-lisp
(use-package vterm
  :ensure nil
  :bind (("C-c t" . vterm)
         :map vterm-mode-map
         ("C-q" . vterm-send-next-key))
  :custom
  (vterm-kill-buffer-on-exit t)
  (vterm-clear-scrollback-when-clearing t))
#+end_src

* Visual

** Color codes

#+begin_src emacs-lisp
(use-package rainbow-mode)
#+end_src

** Column number

#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src

** Cursor

#+begin_src emacs-lisp
(setq-default cursor-type 'hbar
              cursor-in-non-selected-windows nil)
#+end_src

** Dialog box

#+begin_src emacs-lisp
(setq use-dialog-box nil)
#+end_src

** Display time on mode-line

#+begin_src emacs-lisp
(use-package time
  :ensure nil
  :defer 2
  :custom
  (display-time-default-load-average nil)
  (display-time-24hr-format t)
  :config
  (display-time-mode 1))
#+end_src

** Font

#+begin_src emacs-lisp
(defvar crz/font "Iosevka 10")

(defun crz/set-font-faces ()
  (set-face-attribute 'default nil :font crz/font)
  (set-face-attribute 'fixed-pitch nil :font crz/font)
  (set-face-attribute 'variable-pitch nil :font crz/font))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame (crz/set-font-faces))))
  (crz/set-font-faces))
#+end_src

** Line number

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Maximize the frame

#+begin_src emacs-lisp
(setq frame-resize-pixelwise t)
#+end_src

** Tab bar

#+begin_src emacs-lisp
(use-package tab-bar
  :ensure nil
  :bind (("C-<tab>" . tab-recent)
         ("C-x t b" . tab-switch))
  :custom
  (tab-bar-new-button nil)
  (tab-bar-close-button nil)
  (tab-bar-back-button nil)
  (tab-bar-border nil)
  (tab-bar-tab-name-function 'tab-bar-tab-name-truncated)
  (tab-bar-tab-name-truncated-max 15)
  (tab-bar-show 1))
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package modus-themes
  :ensure nil
  :init
  (setq modus-themes-subtle-line-numbers t
        modus-themes-org-blocks 'gray-background
        modus-themes-mode-line '(borderless))
  (load-theme 'modus-vivendi t))
#+end_src

* Window management

** Movement

#+begin_src emacs-lisp
(use-package ace-window
  :bind ("M-o" . ace-window)
  :custom
  (aw-scope 'frame)
  (aw-ignore-current t))
#+end_src

** Popup

#+begin_src emacs-lisp
(use-package popper
  :defer 2
  :bind (("M-'" . popper-toggle-latest)
         ("C-'" . popper-cycle)
         ("C-M-'" . popper-toggle-type))
  :custom
  (popper-window-height 17)
  (popper-reference-buffers '("\\*Async Shell Command\\*"
                              "\\*DWIM shell command\\* done"
                              grep-mode
                              debugger-mode))
  :config
  (popper-mode 1)
  (popper-echo-mode 1))
#+end_src

* XTerm color codes

** Compilation

#+begin_src emacs-lisp
(use-package xterm-color)

(use-package compile
  :ensure nil
  :custom
  (compilation-environment '("TERM=xterm-256color"))
  :config
  (defun crz/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  (advice-add 'compilation-filter :around #'crz/advice-compilation-filter))
#+end_src

** Eshell

#+begin_src emacs-lisp
(use-package esh-mode
  :ensure nil
  :hook (eshell-before-prompt . (lambda () (setq xterm-color-preserve-properties t)))
  :custom
  (xterm-color-use-bold-for-bright t)
  :config
  (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
  (delq 'eshell-handle-ansi-color eshell-output-filter-functions)
  (setenv "TERM" "xterm-256color"))
#+end_src
